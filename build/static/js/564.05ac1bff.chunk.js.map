{"version":3,"file":"static/js/564.05ac1bff.chunk.js","mappings":"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","sources":["components/saveToLocalStorage/InitialSaveToLocalStorage.js","pages/joinView/JoinView.js"],"sourcesContent":["import {PotionData} from \"../../redux/PotionData\"\r\nimport { IngredientData } from \"../../redux/IngredientData\"\r\nimport { PotionRecipeData } from \"../../redux/PotionRecipeData\"\r\n\r\n\r\n// Setting up local storage for Potions, LevelExp, Ingredients, BuyLetter and PotionRecipe are required to be able to load from it when disconnected.\r\nexport const InitialSaveToLocalStorage = () => {\r\n\r\n    storeLevelExp()\r\n\r\n    storePotionsList()\r\n\r\n    storeIngredientsList()\r\n\r\n    storeRecipeList()\r\n\r\n    storeBuyletter()\r\n}\r\n\r\n\r\nfunction storeLevelExp() {\r\n    var levelExp = {currentLevel: 1, totalExp: 0, title: \"NOVICE\", level_2_requirement: 10, level_3_requirement: 20, level_4_requirement: 35, level_5_requirement: 50}\r\n    localStorage.setItem(\"levelExp\", JSON.stringify(levelExp))\r\n}\r\n\r\nfunction storePotionsList() {\r\n    const storedPotionList = PotionData.map(({ image_bronze, image_silver, image_gold, ...rest }) => rest)\r\n    localStorage.setItem(\"potionsList\", JSON.stringify(storedPotionList))\r\n}\r\n\r\nfunction storeIngredientsList() {\r\n    const storedIngredientsList = IngredientData.map(({ image_normal, image_golden, ...rest }) => rest)\r\n    localStorage.setItem(\"ingredientsList\", JSON.stringify(storedIngredientsList))\r\n}\r\n\r\nfunction storeRecipeList() {\r\n    const storedRecipeList = PotionRecipeData.map(({ potion_image, ...rest }) => rest)\r\n    localStorage.setItem(\"recipeList\", JSON.stringify(storedRecipeList))\r\n}\r\n\r\nfunction storeBuyletter() {\r\n    localStorage.setItem(\"buyletter\", JSON.stringify([]))\r\n}\r\n","import React, { useEffect } from 'react'\r\nimport { useState } from 'react'\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useDispatch } from 'react-redux'\r\nimport { add_playerStartData } from \"../../redux/PlayerSocketReducer\"\r\nimport { add_gameStats } from \"../../redux/GameStatsReducer\"\r\nimport \"./joinView.css\"\r\nimport \"./responsive/tablet.css\"\r\nimport \"./responsive/responsive.css\"\r\nimport potion_rules from \"../../image_assets/general/potion_rules.webp\"\r\nimport {InitialSaveToLocalStorage} from \"../../components/saveToLocalStorage/InitialSaveToLocalStorage\"\r\nimport { select_one_quiz } from '../../redux/QuizReducer';\r\n\r\n\r\n\r\nfunction JoinView(props) {\r\n\r\n  let socket = props.socket\r\n  let navigate = useNavigate();\r\n  const dispatch = useDispatch()\r\n\r\n  const [viewContent, setViewContent] = useState(\"gamecode\")\r\n  const [gameCode, setGameCode] = useState(\"\")\r\n  const [nickname, setNickname] = useState(\"\")\r\n\r\n\r\n\r\n   function switchViewContent() {\r\n    if (gameCode !== \"\") {setViewContent(\"enterName\")}\r\n    if (nickname !== \"\") {setViewContent(\"readyAndWaiting\"); joinRoom(); sendNickname()}\r\n    } // End of switchViewContent\r\n\r\n\r\n    // Send Player data to server, host, redux, and localStorage\r\n    const sendNickname = () => {\r\n      socket.emit(\"player_joining\", { nickname, cards: [0,0,0], gameCode, coins: 0 });\r\n\r\n      // Send player data to redux\r\n      dispatch(add_playerStartData({playerName: nickname, cards: [0,0,0], gameCode: gameCode, coins : 0}))\r\n      \r\n      // Save initial player data to localStorage\r\n      const storedPlayerData = {playerName : nickname, cards : [0,0,0], gameCode : gameCode, coins : 0}\r\n      localStorage.setItem(\"playerStats\", JSON.stringify(storedPlayerData))\r\n\r\n      // Disconnected status set to false, to allow player stats to be save at localStorage\r\n      localStorage.setItem(\"disconnected\", \"connected\")\r\n    \r\n    } // End of sendNickname()\r\n\r\n\r\n\r\n    function updatePlayerStats(playerID) {\r\n      // Get player data from localStorage, as useState will be empty because of input onchange will make it so\r\n      let playerData = JSON.parse(localStorage.getItem(\"playerStats\"))\r\n      \r\n      // Send player data updated with socket.id/playerID to redux\r\n      dispatch(add_playerStartData({playerID: playerID, playerName: playerData.playerName, cards: playerData.cards, gameCode: playerData.gameCode, coins : playerData.coins}))\r\n\r\n      // Save initial player data to localStorage\r\n      const storedPlayerData = {playerID: playerID, playerName :  playerData.playerName, cards : playerData.cards, gameCode : playerData.gameCode, coins: playerData.coins}\r\n      localStorage.setItem(\"playerStats\", JSON.stringify(storedPlayerData))\r\n\r\n    } // End of updatePlayerStats()\r\n\r\n\r\n\r\n    const configureGameCode = (playerGameCode) => {\r\n      // Remove potiontial whitespace from gameCode\r\n      const gameCodeNoWhitespace = playerGameCode.replace(/ /g,'')\r\n      setGameCode(gameCodeNoWhitespace)\r\n    }\r\n  \r\n\r\n    // Join room send\r\n    const joinRoom = () => {\r\n      if (gameCode !== \"\") {\r\n        socket.emit(\"join_room\", gameCode);\r\n      //  console.log(\"JOIN join room working\")\r\n      }\r\n    };\r\n\r\n\r\n    // Start game receive\r\n    useEffect(() => {\r\n      //---------------------------------------------------\r\n      socket.on(\"start_game\", (gameData /*, quizData*/) => {\r\n      //---------------------------------------------------\r\n        dispatch(add_gameStats({gameData}))\r\n        //---------------------------------------------------\r\n        //dispatch(select_one_quiz(quizData))\r\n        //---------------------------------------------------\r\n        InitialSaveToLocalStorage()\r\n        navigate('/quiz')\r\n      })\r\n\r\n      socket.on(\"sending_playerID\", (socketID) => {\r\n        setTimeout(function() {updatePlayerStats(socketID)}, 1000);\r\n      })\r\n  }, [socket]);\r\n\r\n  \r\n\r\n\r\n  return (\r\n    <div className='joinView'>\r\n        <div className=\"joinView_top\">\r\n            { viewContent === \"readyAndWaiting\" && <p className=\"joinView_top_title\">Rules of the game</p>}\r\n        </div>\r\n        <div className=\"joinView_bottom\">\r\n\r\n        { viewContent === \"gamecode\" &&\r\n           <div className=\"joinView_inputContainer\">\r\n                <p className=\"joinView_inputTitle\">Game Code</p>\r\n                <input type=\"text\" className=\"joinView_inputfield\" placeholder='Enter code here...' onChange={(e) => configureGameCode(e.target.value)}/>\r\n                <div onClick={() => {switchViewContent()}} className=\"joinView_inputBtn\">Next</div>\r\n           </div>\r\n        }\r\n        { viewContent === \"enterName\" &&\r\n           <div className=\"joinView_inputContainer\">\r\n                <p className=\"joinView_inputTitle\">Nickname</p>\r\n                <input type=\"text\" className=\"joinView_inputfield\" placeholder='Write a name...' onChange={(e) => setNickname(e.target.value)}/>\r\n                <div onClick={() => {switchViewContent()}} className=\"joinView_inputBtn\">Ready</div>\r\n           </div>\r\n        }\r\n        { viewContent === \"readyAndWaiting\" &&\r\n           <img src={potion_rules} alt=\"\" className=\"rules_of_the_game\" />\r\n        }\r\n\r\n        </div>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default JoinView"],"names":["InitialSaveToLocalStorage","levelExp","currentLevel","totalExp","title","level_2_requirement","level_3_requirement","level_4_requirement","level_5_requirement","localStorage","setItem","JSON","stringify","storeLevelExp","storedPotionList","PotionData","image_bronze","image_silver","image_gold","storePotionsList","storedIngredientsList","IngredientData","image_normal","image_golden","storeIngredientsList","storedRecipeList","PotionRecipeData","potion_image","storeRecipeList","props","socket","navigate","useNavigate","dispatch","useDispatch","useState","viewContent","setViewContent","gameCode","setGameCode","nickname","setNickname","switchViewContent","joinRoom","sendNickname","emit","cards","coins","add_playerStartData","playerName","storedPlayerData","useEffect","on","gameData","add_gameStats","socketID","setTimeout","playerID","playerData","parse","getItem","updatePlayerStats","className","type","placeholder","onChange","e","playerGameCode","gameCodeNoWhitespace","replace","configureGameCode","target","value","onClick","src","potion_rules","alt"],"sourceRoot":""}