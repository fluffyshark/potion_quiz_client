{"version":3,"file":"static/js/564.eef30903.chunk.js","mappings":"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","sources":["pages/joinView/JoinView.js"],"sourcesContent":["import React, { useEffect } from 'react'\r\nimport { useState } from 'react'\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { add_playerStartData } from \"../../redux/PlayerSocketReducer\"\r\nimport { add_gameStats } from \"../../redux/GameStatsReducer\"\r\nimport \"./joinView.css\"\r\nimport \"./responsive/tablet.css\"\r\nimport \"./responsive/responsive.css\"\r\nimport potion_rules from \"../../image_assets/general/potion_rules.webp\"\r\n\r\n\r\n\r\nfunction JoinView(props) {\r\n\r\n  let socket = props.socket\r\n  let navigate = useNavigate();\r\n  const dispatch = useDispatch()\r\n\r\n  const [viewContent, setViewContent] = useState(\"gamecode\")\r\n  const [gameCode, setGameCode] = useState(\"\")\r\n  const [nickname, setNickname] = useState(\"\")\r\n\r\n  const playerStats = useSelector((state) => state.playerStats.value) \r\n\r\n   function switchViewContent() {\r\n    if (gameCode !== \"\") {setViewContent(\"enterName\"); joinRoom()}\r\n    if (nickname !== \"\") {setViewContent(\"readyAndWaiting\"); sendNickname()}\r\n    }\r\n\r\n    // Send Player data to server, host, redux, and localStorage\r\n    const sendNickname = () => {\r\n      socket.emit(\"player_joining\", { nickname, cards: [0,0,0], gameCode, coins: 0 });\r\n\r\n      // Send player data to redux\r\n      dispatch(add_playerStartData({playerName: nickname, cards: [0,0,0], gameCode: gameCode, coins : 0}))\r\n      \r\n      // Save initial player data to localStorage\r\n      const storedPlayerData = {playerName : nickname, cards : [0,0,0], gameCode : gameCode, coins : 0}\r\n      localStorage.setItem(\"playerStats\", JSON.stringify(storedPlayerData))\r\n\r\n      // Disconnected status set to false, to allow player stats to be save at localStorage\r\n      localStorage.setItem(\"disconnected\", \"connected\")\r\n    };\r\n\r\n    function updatePlayerStats(playerID) {\r\n      // Get player data from localStorage, as useState will be empty because of input onchange will make it so\r\n      let playerData = JSON.parse(localStorage.getItem(\"playerStats\"))\r\n      \r\n      // Send player data updated with socket.id/playerID to redux\r\n      dispatch(add_playerStartData({playerID: playerID, playerName: playerData.playerName, cards: playerData.cards, gameCode: playerData.gameCode, coins : playerData.coins}))\r\n\r\n      // Save initial player data to localStorage\r\n      const storedPlayerData = {playerID: playerID, playerName :  playerData.playerName, cards : playerData.cards, gameCode : playerData.gameCode, coins: playerData.coins}\r\n      localStorage.setItem(\"playerStats\", JSON.stringify(storedPlayerData))\r\n\r\n    }\r\n\r\n    \r\n\r\n    const configureGameCode = (playerGameCode) => {\r\n      // Remove potiontial whitespace from gameCode\r\n      const gameCodeNoWhitespace = playerGameCode.replace(/ /g,'')\r\n      setGameCode(gameCodeNoWhitespace)\r\n    }\r\n  \r\n    // Join room send\r\n    const joinRoom = () => {\r\n      if (gameCode !== \"\") {\r\n        socket.emit(\"join_room\", gameCode);\r\n      //  console.log(\"JOIN join room working\")\r\n      }\r\n    };\r\n\r\n\r\n    // Start game receive\r\n    useEffect(() => {\r\n      socket.on(\"start_game\", (data) => {\r\n        dispatch(add_gameStats({data}))\r\n        navigate('/quiz')\r\n      })\r\n\r\n      socket.on(\"sending_playerID\", (socketID) => {\r\n        setTimeout(function() {updatePlayerStats(socketID)}, 1000);\r\n      })\r\n  }, [socket]);\r\n\r\n  \r\n\r\n\r\n  return (\r\n    <div className='joinView'>\r\n        <div className=\"joinView_top\">\r\n            { viewContent === \"readyAndWaiting\" && <p className=\"joinView_top_title\">Rules of the game</p>}\r\n        </div>\r\n        <div className=\"joinView_bottom\">\r\n\r\n        { viewContent === \"gamecode\" &&\r\n           <div className=\"joinView_inputContainer\">\r\n                <p className=\"joinView_inputTitle\">Game Code</p>\r\n                <input type=\"text\" className=\"joinView_inputfield\" placeholder='Enter code here...' onChange={(e) => configureGameCode(e.target.value)}/>\r\n                <div onClick={() => {switchViewContent()}} className=\"joinView_inputBtn\">Next</div>\r\n           </div>\r\n        }\r\n        { viewContent === \"enterName\" &&\r\n           <div className=\"joinView_inputContainer\">\r\n                <p className=\"joinView_inputTitle\">Nickname</p>\r\n                <input type=\"text\" className=\"joinView_inputfield\" placeholder='Write a name...' onChange={(e) => setNickname(e.target.value)}/>\r\n                <div onClick={() => {switchViewContent()}} className=\"joinView_inputBtn\">Ready</div>\r\n           </div>\r\n        }\r\n        { viewContent === \"readyAndWaiting\" &&\r\n           <img src={potion_rules} alt=\"\" className=\"rules_of_the_game\" />\r\n        }\r\n\r\n        </div>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default JoinView"],"names":["props","socket","navigate","useNavigate","dispatch","useDispatch","useState","viewContent","setViewContent","gameCode","setGameCode","nickname","setNickname","switchViewContent","joinRoom","sendNickname","useSelector","state","playerStats","value","emit","cards","coins","add_playerStartData","playerName","storedPlayerData","localStorage","setItem","JSON","stringify","useEffect","on","data","add_gameStats","socketID","setTimeout","playerID","playerData","parse","getItem","updatePlayerStats","className","type","placeholder","onChange","e","playerGameCode","gameCodeNoWhitespace","replace","configureGameCode","target","onClick","src","potion_rules","alt"],"sourceRoot":""}