{"version":3,"file":"static/js/843.6a657042.chunk.js","mappings":"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","sources":["components/saveToLocalStorage/InitialSaveToLocalStorage.js","pages/hostingView/Hostboard.js","components/timer/Timer.js","pages/hostingView/HostingView.js"],"sourcesContent":["import {PotionData} from \"../../redux/PotionData\"\r\nimport { IngredientData } from \"../../redux/IngredientData\"\r\nimport { PotionRecipeData } from \"../../redux/PotionRecipeData\"\r\n\r\n\r\n// Setting up local storage for Potions, LevelExp, Ingredients, BuyLetter and PotionRecipe are required to be able to load from it when disconnected.\r\nexport const InitialSaveToLocalStorage = () => {\r\n\r\n    storeLevelExp()\r\n\r\n    storePotionsList()\r\n\r\n    storeIngredientsList()\r\n\r\n    storeRecipeList()\r\n\r\n    storeBuyletter()\r\n}\r\n\r\n\r\nfunction storeLevelExp() {\r\n    var levelExp = {currentLevel: 1, totalExp: 0, title: \"NOVICE\", level_2_requirement: 10, level_3_requirement: 20, level_4_requirement: 35, level_5_requirement: 50}\r\n    localStorage.setItem(\"levelExp\", JSON.stringify(levelExp))\r\n}\r\n\r\nfunction storePotionsList() {\r\n    const storedPotionList = PotionData.map(({ image_bronze, image_silver, image_gold, ...rest }) => rest)\r\n    localStorage.setItem(\"potionsList\", JSON.stringify(storedPotionList))\r\n}\r\n\r\nfunction storeIngredientsList() {\r\n    const storedIngredientsList = IngredientData.map(({ image_normal, image_golden, ...rest }) => rest)\r\n    localStorage.setItem(\"ingredientsList\", JSON.stringify(storedIngredientsList))\r\n}\r\n\r\nfunction storeRecipeList() {\r\n    const storedRecipeList = PotionRecipeData.map(({ potion_image, ...rest }) => rest)\r\n    localStorage.setItem(\"recipeList\", JSON.stringify(storedRecipeList))\r\n}\r\n\r\nfunction storeBuyletter() {\r\n    localStorage.setItem(\"buyletter\", JSON.stringify([]))\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport \"./hostboard.css\"\r\nimport \"./responsive/tablet.css\"\r\nimport \"./responsive/responsive.css\"\r\nimport leaderboard from \"../../image_assets/general/leaderboard.webp\"\r\nimport { useSelector, useDispatch } from \"react-redux\"\r\nimport { activate_power, dectivate_power } from \"../../redux/PowerReducer\"\r\nimport bronze_card_display from \"../../image_assets/general/bronze_card_display.png\"\r\nimport silver_card_display from \"../../image_assets/general/silver_card_display.png\"\r\nimport gold_card_display from \"../../image_assets/general/gold_card_display.png\"\r\nimport money_icon from \"../../image_assets/general/money_icon.webp\"\r\nimport small_card from \"../../image_assets/general/small_card.png\"\r\n\r\n\r\nfunction Hostboard() {\r\n\r\n  const [rankedPlayers, setRankedPlayers] = useState([\r\n    {name: \"NO PLAYER\", coins: 0, cards: [0,0,0], points: 0},\r\n    {name: \"NO PLAYER\", coins: 0, cards: [0,0,0], points: 0},\r\n    {name: \"NO PLAYER\", coins: 0, cards: [0,0,0], points: 0},\r\n    {name: \"NO PLAYER\", coins: 0, cards: [0,0,0], points: 0},\r\n    {name: \"NO PLAYER\", coins: 0, cards: [0,0,0], points: 0},\r\n    {name: \"NO PLAYER\", coins: 0, cards: [0,0,0], points: 0}\r\n  ])\r\n\r\n  const dispatch = useDispatch()\r\n  const [showWinMode, setShowWinMode] = useState(true)\r\n  const gameStats = useSelector((state) => state.GameData.value)\r\n  const powersList = useSelector((state) => state.powers.value)\r\n\r\n  let rankPlacement = [\r\n    \"leaderboard_containter_rank01\", \"leaderboard_containter_rank02\", \"leaderboard_containter_rank03\",\r\n    \"leaderboard_containter_rank04\", \"leaderboard_containter_rank05\", \"leaderboard_containter_rank06\"\r\n  ]\r\n\r\n  const calculateRank = () => {\r\n    let playersPointsAndNames = []\r\n    \r\n    // Award points for each card players have (bronze = 20) (silver = 50) (gold = 150)\r\n    gameStats.map((player) => {\r\n      let points = (player.cards[0] * 20) + (player.cards[1] * 50) + (player.cards[2] * 150)\r\n      playersPointsAndNames.push({name: player.playerName, coins: player.coins, cards: player.cards, points: points})\r\n    })\r\n    // Rank the array of players based of the amount of points\r\n    playersPointsAndNames.sort((a, b) => b.points - a.points);\r\n    console.log(\"playersPointsAndNames: \", playersPointsAndNames)\r\n\r\n    // Remove all players except to top 6\r\n    for (let i = 0; i < playersPointsAndNames.length; i++) {\r\n      if (playersPointsAndNames.length > 6) {playersPointsAndNames.pop()}\r\n    }\r\n\r\n    // if leaderboard not full, then fill up leaderboard with placeholder players\r\n    if (playersPointsAndNames.length < 6) {\r\n      for (let i = 0; playersPointsAndNames.length < 6 ; i++) {playersPointsAndNames.push({name: \"NO PLAYER\", coins: 0, cards: [0,0,0], points: 0})}\r\n    }\r\n\r\n    // Set ranked array as state\r\n    setRankedPlayers(playersPointsAndNames) \r\n  }\r\n\r\n\r\n \r\n  // Render out transparent card or visible card depending on how many gold cards each player on the leaderboard have.\r\n  // Shows how many gold cards each player have left until victory (20 cards).\r\n  const calculateWinCards = (nr) => {\r\n    \r\n    // Declare array with CSS-class that gives all cards a low opacity\r\n    let cardClassPlayer = [\r\n      \"winCardTransparent\", \"winCardTransparent\", \"winCardTransparent\", \"winCardTransparent\", \"winCardTransparent\",\r\n      \"winCardTransparent\", \"winCardTransparent\", \"winCardTransparent\", \"winCardTransparent\", \"winCardTransparent\",\r\n      \"winCardTransparent\", \"winCardTransparent\", \"winCardTransparent\", \"winCardTransparent\", \"winCardTransparent\",\r\n      \"winCardTransparent\", \"winCardTransparent\", \"winCardTransparent\", \"winCardTransparent\", \"winCardTransparent\",]\r\n\r\n    // Loop top 6 players as many times as they have they gold cards, to add a CSS-class that restores opasity, to the end of array and then reverse order to make it in front  \r\n    for (let i = 0; i < rankedPlayers[nr].cards[2]; i++) {cardClassPlayer.push(\"winCardSolid\")}; cardClassPlayer.reverse()\r\n\r\n    // Add 20 <img>-tags to declared cardImgCollector, with classes from the the cardClassPlayer \r\n    let cardImgCollector = []\r\n    for (let i = 0; i < 20; i++) {cardImgCollector.push(<img src={small_card} className={cardClassPlayer[i]} alt=\"\" />)}\r\n     \r\n    return (\r\n      <div className='leaderboard_rank_container_cards_winmode'>\r\n        {cardImgCollector}\r\n      </div>)\r\n  }\r\n\r\n  \r\n  useEffect(() => {calculateRank()}, [gameStats])\r\n  \r\n  // Hooks on to global counter, leaderboard switch between two set of statistics every 15 seconds.\r\n  useEffect(() => {\r\n    if (powersList[20].leaderboard_card === \"active\") {setShowWinMode(true)} \r\n    if (powersList[20].counter20_card > 15) {\r\n      dispatch(activate_power({power_name: \"LEADERBOARD STATS\"})); \r\n      dispatch(dectivate_power({power_name: \"LEADERBOARD CARDS\"}))\r\n    }\r\n  },[powersList[20].counter20_card])\r\n\r\n  // Hooks on to global counter, leaderboard switch between two set of statistics every 15 seconds.\r\nuseEffect(() => {\r\n  if (powersList[21].leaderboard_stats === \"active\") {setShowWinMode(false)} \r\n    if (powersList[21].counter21_stats > 15) {\r\n      dispatch(dectivate_power({power_name: \"LEADERBOARD STATS\"}))\r\n      dispatch(activate_power({power_name: \"LEADERBOARD CARDS\"}))\r\n    }\r\n  },[powersList[21].counter21_stats])\r\n\r\n  \r\n\r\n\r\n\r\n  return (\r\n    <div className='leaderboardView'>\r\n        \r\n      <div className=\"leaderboard_middle\">\r\n        <div className=\"leaderboard_middle_container\">\r\n          <div className=\"leaderboard_image_container\">\r\n              <img src={leaderboard} alt=\"\" />\r\n\r\n              {showWinMode ? (\r\n              \r\n                <div>\r\n\r\n                  {rankedPlayers.map((player, i) => {\r\n                    return (\r\n                    \r\n                      <div key={i} className=\"leaderboard_rank_container\" id={rankPlacement[i]} >\r\n                          <div className='leaderboard_rank_container_name_winmode'>\r\n                            <p>{player.name}</p>\r\n                          </div>\r\n                          {calculateWinCards(i)}   \r\n                      </div>\r\n                    )})} \r\n                </div>\r\n              \r\n              ) : (\r\n          \r\n                <div>\r\n                  {rankedPlayers.map((player, i) => {\r\n                    return (\r\n                    \r\n                      <div key={i} className=\"leaderboard_rank_container\" id={rankPlacement[i]} >\r\n                          <div className='leaderboard_rank_container_name'>\r\n                            <p>{player.name}</p>\r\n                          </div>\r\n                          \r\n                          <div className='leaderboard_rank_container_cards'>\r\n                            <p className='leaderboard_bronze_cards'>{player.cards[0]}x</p>\r\n                            <img src={bronze_card_display} alt=\"\" />\r\n                            <p className='leaderboard_silver_cards'>{player.cards[1]}x</p>\r\n                            <img src={silver_card_display} alt=\"\" />\r\n                            <p className='leaderboard_gold_cards'>{player.cards[2]}x</p>\r\n                            <img src={gold_card_display} alt=\"\" />\r\n                          </div>\r\n                          \r\n                          <div className='leaderboard_rank_container_coins'>\r\n                            <p>{player.coins}</p>\r\n                            <img src={money_icon} alt=\"\" />\r\n                          </div>\r\n                      </div>\r\n                    \r\n                    )})} \r\n              </div>\r\n\r\n            )}\r\n              \r\n      \r\n          </div>\r\n        </div>\r\n      </div>\r\n        \r\n      <div className=\"leaderboard_footer\"></div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default Hostboard\r\n","import React, {useState, useRef, useEffect} from 'react'\r\nimport \"./timer.css\"\r\nimport \"./responsive/tablet.css\"\r\n\r\n\r\n\r\nfunction Timer(startCounting) {\r\n\r\n    const  intervalRef = useRef(null)\r\n    const [timer, setTimer] = useState(\"00:00:00\")\r\n    const [userInput, setUserInput] = useState(0)\r\n    \r\n    function getTimeRemaining(endtime) {\r\n        const total = Date.parse(endtime) - Date.parse(new Date())\r\n        const seconds = Math.floor( (total/1000) % 60 )\r\n        const minutes = Math.floor( (total/1000/60) % 60 )\r\n        const hours = Math.floor( (total/1000*60*60) % 24 )\r\n        const days = Math.floor( total/ (1000*60*60*24))\r\n        return {\r\n            total, days, hours, minutes, seconds\r\n        }\r\n    }\r\n    function startTimer(deadline) {\r\n        let { total, hours, minutes, seconds} = getTimeRemaining(deadline)\r\n        if (total >= 0) {\r\n            setTimer(\r\n                (hours > 9 ? hours : '0'+hours) + ':' +\r\n                (minutes > 9 ? minutes : '0'+minutes) + ':' +\r\n                (seconds > 9 ? seconds : '0'+seconds)\r\n                \r\n            )\r\n        } else {\r\n            clearInterval(intervalRef.current)\r\n        }\r\n    }\r\n    function clearTimer(endtime) {\r\n        setTimer(\"00:00:00\")\r\n        if (intervalRef.current) clearInterval(intervalRef.current)\r\n        const id = setInterval(() => {\r\n            startTimer(endtime)\r\n        }, 1000)\r\n        intervalRef.current = id\r\n    }  \r\n    function getDeadlineTime() {\r\n        let deadline = new Date()\r\n        deadline.setSeconds(deadline.getSeconds()+userInput*60)\r\n        return deadline\r\n    }\r\n    \r\n    \r\n    useEffect(() => {\r\n        if (startCounting.startTimer === true)  {\r\n            onClickResetBtn()\r\n            document.getElementById(\"timer_container\").style.display = \"none\"\r\n            if (userInput !== 0) {\r\n                document.getElementById(\"actual_timer\").style.display = \"inherit\"\r\n            } \r\n        } \r\n    }, [startCounting])\r\n\r\n\r\n    \r\n    function onClickResetBtn() {\r\n        if (userInput !== 0) {\r\n            if (intervalRef.current) clearInterval(intervalRef.current)\r\n            clearTimer(getDeadlineTime())\r\n            console.log(\"TIMER START\")\r\n        }\r\n        \r\n    }\r\n\r\n\r\n/// IF SET TO TRUE => REMOVE INPUT & DISPLAY TIMER\r\n\r\n  return ( <>\r\n    <div id='timer_container'>\r\n        <p className='timer_text'>END QUIZ IN</p>\r\n        <input type=\"text\" placeholder='0' onChange={(e) => setUserInput(e.target.value)}/>\r\n        <p className='timer_text'>MINUTES</p>\r\n    </div>\r\n    <div id=\"actual_timer\">\r\n        {timer}\r\n    </div>\r\n  </>\r\n    \r\n  )\r\n}\r\n\r\nexport default Timer","import React, { useEffect, useState } from 'react'\r\nimport \"./hostingView.css\"\r\nimport \"./responsive/tablet.css\"\r\nimport \"./responsive/responsive.css\"\r\nimport Hostboard from \"./Hostboard.js\"\r\nimport Timer from \"../../components/timer/Timer.js\"\r\nimport { activate_power } from \"../../redux/PowerReducer\"\r\nimport { activate_auction } from \"../../redux/AuctionReducer\"\r\nimport { useSelector, useDispatch } from \"react-redux\"\r\nimport {motion} from \"framer-motion\"\r\nimport {playSound} from \"../../components/playSound/playSound\"\r\nimport {EndGame} from \"../../components/endGame/EndGame\"\r\nimport {InitialSaveToLocalStorage} from \"../../components/saveToLocalStorage/InitialSaveToLocalStorage\"\r\n\r\n// Hosting using Socket.io:\r\n// - Sockets are initiated at App.js and passed down to all children using props.\r\n// - At StartView, when clicking host button a random 9 digit number (gameCode and edited displayCode) are generated and passed to playerStats by redux.\r\n// - At StartView, clicking host button also make that client join socket room using the gameCode as room code.\r\n// - At HostView, the displayCode is collected by redux and displayed in view.\r\n// - At JoinView, the players write the displayCode that are visually displayed in HostView on another device (projector or other monitor)\r\n// - At JoinView, players join the same room as the host using the displayCode (turned into gameCode) and their nickname are displayed on the host's view via socket.io.\r\n\r\nfunction HostingView(props) {\r\n\r\n  let socket = props.socket\r\n\r\n  const dispatch = useDispatch()\r\n  const playerStats = useSelector((state) => state.playerStats.value) \r\n  const quizList = useSelector((state) => state.quiz.value)\r\n\r\n\r\n  const [startTimer, setStartTimer] = useState(false)\r\n  const [playersJoined, setPlayersJoined] = useState([])\r\n  const [gameStarted, setGameStarted] = useState(false)\r\n  \r\n\r\n\r\n  // Show players who joined room\r\n  useEffect(() => {\r\n    socket.on(\"player_accepted\", (data) => {\r\n      console.log(\"player_accepted\", data)\r\n      setPlayersJoined(playersJoined => [...playersJoined, data.nickname]);\r\n    })\r\n\r\n    socket.on(\"start_game\", (data) => {\r\n      console.log(\"Start Game Host\", data)\r\n\r\n    })\r\n\r\n    // Receiving game stats from server, in format: [{playerName: string, playerScore: int}]\r\n    socket.on(\"sending_server_gameData\", (data) => {\r\n      console.log(\"FROM SERVER TO HOST.JS: \", data)\r\n      socket.emit(\"gameData_from_host\", data);\r\n    })\r\n\r\n    socket.on(\"sending_jukebox_to_host\", (data) => {\r\n      console.log(\"FROM JUKEBOX: \", data)\r\n      playSound(data.melody)\r\n    })\r\n\r\n}, [socket])\r\n\r\n\r\n  function startGame() {\r\n    //---------------------------------------------------\r\n    socket.emit(\"ready_game\", playerStats.gameCode /*, quizList*/);\r\n    //---------------------------------------------------\r\n    setStartTimer(true)\r\n    setGameStarted(true)\r\n    InitialSaveToLocalStorage()\r\n    dispatch(activate_power({power_name: \"LEADERBOARD CARDS\"}))\r\n    dispatch(activate_auction())\r\n  }\r\n\r\n  \r\n  function hostEndGame() {\r\n    // Host leave socket room and delete server-side game data\r\n    socket.emit(\"host_end_game\", playerStats.gameCode);\r\n    // Deletes game data from localStorage and sends to all players to leave socket room delete their localStorage\r\n    EndGame(socket, playerStats.gameCode)\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  return (\r\n    \r\n    <div className='hostingView'>\r\n        \r\n\r\n        <div className=\"hostingView_top\">\r\n            <Timer startTimer={startTimer} />\r\n            \r\n            {gameStarted ? (\r\n              <motion.button whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.9 }} transition={{ type: \"spring\", stiffness: 400, damping: 17 }} className='hostView_startBtn' onClick={() => hostEndGame()}>END GAME</motion.button>\r\n            ) : (\r\n              <motion.button whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.9 }} transition={{ type: \"spring\", stiffness: 400, damping: 17 }}  className='hostView_startBtn' onClick={() => startGame()}>START GAME</motion.button>\r\n            )}\r\n            \r\n        </div>\r\n        \r\n\r\n        {gameStarted ? (<Hostboard />) : (\r\n          \r\n          <>\r\n\r\n            <div className=\"hostingView_middle\">\r\n              <p className=\"joinDesc\">Go to potionquiz.com and enter:</p>\r\n              <p className=\"joinCode\">{playerStats.displayCode}</p>\r\n            </div>\r\n            \r\n            <div className=\"hostingView_bottom\">\r\n              {playersJoined.map((player, i) => {\r\n                if (playersJoined.length > 0) {\r\n                  return (<div key={i} className=\"playerTags\">{player}</div>)\r\n                }\r\n              })} \r\n\r\n            </div>\r\n        \r\n        </>\r\n\r\n        )}\r\n  </div>\r\n    \r\n\r\n  )\r\n}\r\n\r\nexport default HostingView"],"names":["InitialSaveToLocalStorage","levelExp","currentLevel","totalExp","title","level_2_requirement","level_3_requirement","level_4_requirement","level_5_requirement","localStorage","setItem","JSON","stringify","storeLevelExp","storedPotionList","PotionData","image_bronze","image_silver","image_gold","storePotionsList","storedIngredientsList","IngredientData","image_normal","image_golden","storeIngredientsList","storedRecipeList","PotionRecipeData","potion_image","storeRecipeList","useState","name","coins","cards","points","rankedPlayers","setRankedPlayers","dispatch","useDispatch","showWinMode","setShowWinMode","gameStats","useSelector","state","GameData","value","powersList","powers","rankPlacement","calculateWinCards","nr","cardClassPlayer","i","push","reverse","cardImgCollector","src","className","alt","useEffect","playersPointsAndNames","map","player","playerName","sort","a","b","console","log","length","pop","calculateRank","leaderboard_card","counter20_card","activate_power","power_name","dectivate_power","leaderboard_stats","counter21_stats","leaderboard","id","bronze_card_display","silver_card_display","gold_card_display","money_icon","startCounting","intervalRef","useRef","timer","setTimer","userInput","setUserInput","startTimer","deadline","endtime","total","Date","parse","seconds","Math","floor","minutes","hours","days","getTimeRemaining","clearInterval","current","setInterval","clearTimer","setSeconds","getSeconds","getDeadlineTime","document","getElementById","style","display","type","placeholder","onChange","e","target","props","socket","playerStats","quiz","setStartTimer","playersJoined","setPlayersJoined","gameStarted","setGameStarted","on","data","nickname","emit","playSound","melody","motion","whileHover","scale","whileTap","transition","stiffness","damping","onClick","gameCode","EndGame","activate_auction","displayCode"],"sourceRoot":""}